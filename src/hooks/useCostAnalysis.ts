
import { useState } from 'react';
import { fileToBase64, getMimeType } from '../utils/file-helpers';

interface CostAnalysisData {
  esPorLotes: boolean;
  lotes: Array<{
    nombre: string;
    centroAsociado: string;
    descripcion: string;
    presupuesto: string;
    requisitosClave: string[];
  }>;
  variablesDinamicas: Array<{
    nombre: string;
    descripcion: string;
    mapeo: 'price' | 'tenderBudget' | 'maxScore' | 'lowestPrice' | 'averagePrice';
  }>;
  formulaEconomica: string;
  formulasDetectadas: Array<{
    formulaOriginal: string;
    representacionLatex: string;
    descripcionVariables: string;
    condicionesLogicas: string;
  }>;
  umbralBajaTemeraria: string;
  criteriosAutomaticos: Array<{
    nombre: string;
    descripcion: string;
    puntuacionMaxima: number;
  }>;
  criteriosSubjetivos: Array<{
    nombre: string;
    descripcion: string;
    puntuacionMaxima: number;
  }>;
  otrosCriterios: Array<{
    nombre: string;
    descripcion: string;
    puntuacionMaxima: number;
  }>;
  presupuestoGeneral: string;
  costesDetalladosRecomendados: {
    [key: string]: any;
  };
}

export const useCostAnalysis = () => {
  const [analysisResult, setAnalysisResult] = useState<CostAnalysisData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateMasterPrompt = (): string => `
Act√∫a como un prestigioso matem√°tico y un experto consultor especializado en licitaciones p√∫blicas de electromedicina en Espa√±a. Tu tarea es analizar los documentos PDF proporcionados: un Pliego de Cl√°usulas Administrativas Particulares (PCAP) y un Pliego de Prescripciones T√©cnicas (PPT).

**Instrucci√≥n de Idioma (CR√çTICA):** Los documentos de entrada (PCAP y PPT) pueden estar escritos en espa√±ol, catal√°n, gallego, euskera (vasco), valenciano o ingl√©s. Independientemente del idioma de origen, TU RESPUESTA Y TODOS LOS DATOS EXTRA√çDOS en el JSON final DEBEN ESTAR OBLIGATORIAMENTE EN ESPA√ëOL. Realiza la traducci√≥n necesaria para todos los campos.

Extrae √∫nicamente la informaci√≥n verificable presente en los documentos proporcionados para rellenar la estructura JSON solicitada. No incluyas explicaciones, introducciones o conclusiones fuera del objeto JSON.

**An√°lisis de Lotes:**
1.  **Detecta si es por lotes:** Primero, determina si la licitaci√≥n est√° expl√≠citamente dividida en lotes. Establece el campo 'esPorLotes' en 'true' si es as√≠, y en 'false' en caso contrario.
2.  **Si es por lotes:** Rellena el array 'lotes'. Para cada lote identificado, extrae: 'nombre', 'centroAsociado', 'descripcion', 'presupuesto' (string num√©rico sin IVA), y 'requisitosClave'.
3.  **Si NO es por lotes:** El array 'lotes' debe quedar vac√≠o ([]).

---
**TAREA CR√çTICA 1: AN√ÅLISIS DE VARIABLES DIN√ÅMICAS (NUEVO)**
Antes de analizar la f√≥rmula econ√≥mica principal, tu primera tarea es identificar las variables que se usan en ella.
1.  **Detecta Variables:** Identifica todas las variables utilizadas en la f√≥rmula de puntuaci√≥n econ√≥mica (ej. "Plic", "Pmax", "Oferta_i", "B").
2.  **Define y Mapea:** Por cada variable detectada, crea un objeto en el array \`variablesDinamicas\`. Este objeto DEBE tener:
    *   \`nombre\`: El nombre exacto de la variable tal y como aparece en el pliego (ej: "Plic").
    *   \`descripcion\`: Una descripci√≥n clara de lo que representa la variable (ej: "Presupuesto base de licitaci√≥n sin IVA").
    *   \`mapeo\`: Un mapeo ESTRICTO a uno de los siguientes conceptos del sistema: "price", "tenderBudget", "maxScore", "lowestPrice", "averagePrice".

**TAREA CR√çTICA 2: AN√ÅLISIS Y DESCOMPOSICI√ìN DE F√ìRMULAS (AST como String JSON)**
Una vez identificadas las variables, analiza la f√≥rmula econ√≥mica principal y descomponla en un √Årbol de Sintaxis Abstracta (AST) serializado como una cadena JSON.
*   **Usa las Variables Detectadas:** En los nodos de tipo "variable" del AST, DEBES usar el \`nombre\` de la variable que has definido en \`variablesDinamicas\`. Por ejemplo, si detectaste "Plic", el nodo variable ser√° \`{ "type": "variable", "name": "Plic" }\`.
*   **Serializaci√≥n:** El objeto JSON completo del AST debe ser serializado como una √∫nica cadena de texto para el campo \`formulaEconomica\`.

**EJEMPLO COMPLETO:**
Si la f√≥rmula es \`70 * (1 - (P - Pmin) / (Plic - Pmin))\`, y has detectado que 'P' es el precio de la oferta, 'Pmin' el precio m√°s bajo y 'Plic' el presupuesto:
1.  \`variablesDinamicas\` contendr√° las definiciones de 'P', 'Pmin', y 'Plic'.
2.  El AST usar√° estos nombres: \`{"type":"binary_operation","operator":"*","left":{...},"right":{"type":"binary_operation", "operator": "-", "left":{...}, "right":{"type":"binary_operation", "operator":"/", "left": {"type":"variable", "name":"P"},...}}}\`
3.  El campo \`formulaEconomica\` recibir√° este AST como una cadena de texto JSON.

Si no hay f√≥rmula econ√≥mica principal, \`formulaEconomica\` ser√° un string vac√≠o ('') y \`variablesDinamicas\` un array vac√≠o ([]).

---
**TAREA CR√çTICA 3: AN√ÅLISIS MATEM√ÅTICO DE TODAS LAS F√ìRMULAS**
Como matem√°tico, tu misi√≥n es identificar, interpretar y catalogar **todas** las f√≥rmulas presentes en los documentos, no solo la f√≥rmula de puntuaci√≥n econ√≥mica principal. Esto incluye f√≥rmulas para criterios de mejora, f√≥rmulas de penalizaci√≥n, umbrales calculados, etc.

Para cada f√≥rmula matem√°tica que encuentres, sin excepci√≥n:
1.  **Ajusta e Interpreta:** Analiza la f√≥rmula para entender su prop√≥sito y componentes. Si la f√≥rmula est√° escrita de manera ambigua o con texto descriptivo, "aj√∫stala" para representarla en una notaci√≥n matem√°tica est√°ndar y clara.
2.  **Cataloga en \`formulasDetectadas\`:** Crea un objeto en el array \`formulasDetectadas\` con los siguientes campos:
    *   \`formulaOriginal\`: La f√≥rmula EXACTA como est√° en el texto. Si la has ajustado desde una descripci√≥n, pon aqu√≠ la versi√≥n ajustada y est√°ndar.
    *   \`representacionLatex\`: Su traducci√≥n precisa a formato LaTeX. Presta especial atenci√≥n a ra√≠ces, potencias, fracciones y s√≠mbolos. **Ej: \`P = 5 * (Ht ‚Äì 100)/ 100)\` debe ser \`P = 5 \\times \\frac{(Ht - 100)}{100}\`**.
    *   \`descripcionVariables\`: Una descripci√≥n clara y concisa de CADA variable en la f√≥rmula.
    *   \`condicionesLogicas\`: Explica cualquier condici√≥n l√≥gica, tramo o regla asociada. Por ejemplo: "Esta f√≥rmula solo se aplica si la oferta supera las 100 horas de formaci√≥n."

Tu objetivo es que un usuario pueda entender perfectamente c√≥mo funciona cada c√°lculo en la licitaci√≥n. No omitas ninguna f√≥rmula, por trivial que parezca.
---

**An√°lisis del Resto de Criterios:**
*   **'umbralBajaTemeraria':** Describe las condiciones para que una oferta sea considerada anormalmente baja o temeraria.
*   **'criteriosAutomaticos', 'criteriosSubjetivos', 'otrosCriterios':** Listas detalladas de todos los dem√°s criterios con su descripci√≥n y puntuaci√≥n m√°xima. La suma de todas las puntuaciones debe ser coherente con el total del pliego.

**An√°lisis Econ√≥mico y de Costes:**
*   **Presupuesto General:** Busca el "Presupuesto Base de Licitaci√≥n" (PBL) o "Valor Estimado del Contrato" (VEC) **TOTAL**. Extrae su valor num√©rico **sin IVA** como una cadena de texto.
*   **Recomendaciones de Costes ('costesDetalladosRecomendados'):** Act√∫a como un director de operaciones. Tu objetivo es generar un desglose de costes **realista, completo y rentable**.

Regla general: Si un dato no se encuentra, usa "No especificado en los documentos" para strings y arrays vac√≠os para listas. Para los costes recomendados, omite los campos que no puedas estimar.

RESPUESTA REQUERIDA: Proporciona √öNICAMENTE un objeto JSON v√°lido con la estructura CostAnalysisData solicitada. No agregues explicaciones, texto adicional o bloques de c√≥digo markdown.
`;

  const callGeminiAPI = async (pcapFile: File, pptFile: File): Promise<CostAnalysisData> => {
    const GEMINI_API_KEY = 'AIzaSyANIWvIMRvCW7f0meHRk4SobRz4s0pnxtg';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';
    
    try {
      console.log('ü§ñ Enviando an√°lisis de costes a Gemini API con archivos PDF...');
      
      // Convertir archivos a base64
      const pcapBase64 = await fileToBase64(pcapFile);
      const pptBase64 = await fileToBase64(pptFile);
      
      console.log('üìÑ Archivos convertidos a base64');
      console.log(`PCAP: ${pcapFile.name} (${pcapFile.size} bytes)`);
      console.log(`PPT: ${pptFile.name} (${pptFile.size} bytes)`);

      const requestBody = {
        contents: [{
          parts: [
            {
              text: generateMasterPrompt()
            },
            {
              inlineData: {
                mimeType: getMimeType(pcapFile.name),
                data: pcapBase64
              }
            },
            {
              inlineData: {
                mimeType: getMimeType(pptFile.name),
                data: pptBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.1,
          topK: 20,
          topP: 0.8,
          maxOutputTokens: 8192,
          responseMimeType: "application/json"
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      };

      console.log('üì§ Enviando request a Gemini con archivos PDF...');

      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì• Response status:', response.status);

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå Error de Gemini API:', errorData);
        throw new Error(`Error de Gemini API: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log('‚úÖ Respuesta completa de Gemini recibida');

      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        console.error('‚ùå Estructura de respuesta inv√°lida:', data);
        throw new Error('Respuesta inv√°lida de Gemini API - estructura incorrecta');
      }

      const responseText = data.candidates[0].content.parts[0].text;
      console.log('üìù Texto de respuesta recibido');

      // Funci√≥n para parsear JSON de forma segura
      const safeJsonParse = (jsonString: string): CostAnalysisData => {
        try {
          // Limpiar la respuesta si tiene bloques de c√≥digo markdown
          let cleanedResponse = jsonString
            .replace(/```json\n?/g, '')
            .replace(/```\n?/g, '')
            .trim();
          
          // Buscar el inicio y fin del JSON
          const jsonStart = cleanedResponse.indexOf('{');
          const jsonEnd = cleanedResponse.lastIndexOf('}');
          
          if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
            cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1);
          }
          
          const parsedResult: CostAnalysisData = JSON.parse(cleanedResponse);
          console.log('‚úÖ JSON parseado exitosamente');
          
          // Validar y limpiar la estructura para evitar objetos complejos en React
          const cleanedResult: CostAnalysisData = {
            esPorLotes: Boolean(parsedResult.esPorLotes),
            lotes: Array.isArray(parsedResult.lotes) ? parsedResult.lotes.map(lote => ({
              nombre: String(lote.nombre || ''),
              centroAsociado: String(lote.centroAsociado || ''),
              descripcion: String(lote.descripcion || ''),
              presupuesto: String(lote.presupuesto || ''),
              requisitosClave: Array.isArray(lote.requisitosClave) ? lote.requisitosClave.map(req => String(req)) : []
            })) : [],
            variablesDinamicas: Array.isArray(parsedResult.variablesDinamicas) ? parsedResult.variablesDinamicas.map(variable => ({
              nombre: String(variable.nombre || ''),
              descripcion: String(variable.descripcion || ''),
              mapeo: ['price', 'tenderBudget', 'maxScore', 'lowestPrice', 'averagePrice'].includes(variable.mapeo) 
                ? variable.mapeo as 'price' | 'tenderBudget' | 'maxScore' | 'lowestPrice' | 'averagePrice'
                : 'price'
            })) : [],
            formulaEconomica: String(parsedResult.formulaEconomica || ''),
            formulasDetectadas: Array.isArray(parsedResult.formulasDetectadas) ? parsedResult.formulasDetectadas.map(formula => ({
              formulaOriginal: String(formula.formulaOriginal || ''),
              representacionLatex: String(formula.representacionLatex || ''),
              descripcionVariables: String(formula.descripcionVariables || ''),
              condicionesLogicas: String(formula.condicionesLogicas || '')
            })) : [],
            umbralBajaTemeraria: String(parsedResult.umbralBajaTemeraria || 'No especificado'),
            criteriosAutomaticos: Array.isArray(parsedResult.criteriosAutomaticos) ? parsedResult.criteriosAutomaticos.map(criterio => ({
              nombre: String(criterio.nombre || ''),
              descripcion: String(criterio.descripcion || ''),
              puntuacionMaxima: Number(criterio.puntuacionMaxima) || 0
            })) : [],
            criteriosSubjetivos: Array.isArray(parsedResult.criteriosSubjetivos) ? parsedResult.criteriosSubjetivos.map(criterio => ({
              nombre: String(criterio.nombre || ''),
              descripcion: String(criterio.descripcion || ''),
              puntuacionMaxima: Number(criterio.puntuacionMaxima) || 0
            })) : [],
            otrosCriterios: Array.isArray(parsedResult.otrosCriterios) ? parsedResult.otrosCriterios.map(criterio => ({
              nombre: String(criterio.nombre || ''),
              descripcion: String(criterio.descripcion || ''),
              puntuacionMaxima: Number(criterio.puntuacionMaxima) || 0
            })) : [],
            presupuestoGeneral: String(parsedResult.presupuestoGeneral || '0'),
            costesDetalladosRecomendados: typeof parsedResult.costesDetalladosRecomendados === 'object' 
              ? parsedResult.costesDetalladosRecomendados || {} 
              : {}
          };
          
          return cleanedResult;
        } catch (parseError) {
          console.error('‚ùå Error parseando JSON:', parseError);
          console.error('üìù Respuesta recibida:', jsonString.substring(0, 500) + '...');
          throw new Error(`La respuesta de Gemini no es un JSON v√°lido: ${parseError instanceof Error ? parseError.message : 'Error desconocido'}`);
        }
      };

      return safeJsonParse(responseText);

    } catch (error) {
      console.error('‚ùå Error en llamada a Gemini API:', error);
      if (error instanceof Error) {
        throw new Error(`Error en an√°lisis de costes con Gemini: ${error.message}`);
      }
      throw new Error('Error desconocido en an√°lisis de costes con Gemini');
    }
  };

  const analyzeCosts = async (pcapFile: File, pptFile: File) => {
    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);
    
    try {
      console.log('üöÄ Iniciando an√°lisis de costes con Gemini y archivos PDF...');
      
      // Verificar archivos
      if (!pcapFile || !pptFile) {
        throw new Error('Ambos archivos (PCAP y PPT) son requeridos para el an√°lisis');
      }
      
      if (pcapFile.type !== 'application/pdf' || pptFile.type !== 'application/pdf') {
        throw new Error('Los archivos deben ser PDFs v√°lidos');
      }
      
      console.log(`üìä Procesando archivos:`);
      console.log(`  - PCAP: ${pcapFile.name} (${(pcapFile.size / 1024 / 1024).toFixed(2)} MB)`);
      console.log(`  - PPT: ${pptFile.name} (${(pptFile.size / 1024 / 1024).toFixed(2)} MB)`);
      
      // Llamar a la API de Gemini con los archivos PDF
      console.log('ü§ñ Enviando an√°lisis completo a Gemini API...');
      const analysis = await callGeminiAPI(pcapFile, pptFile);
      
      setAnalysisResult(analysis);
      console.log('‚úÖ An√°lisis de costes completado exitosamente con Gemini');
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error desconocido durante el an√°lisis';
      setError(errorMessage);
      console.error('‚ùå Error en an√°lisis de costes:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    analyzeCosts,
    analysisResult,
    isLoading,
    error
  };
};
