
import { useState } from 'react';
import { getDocument, GlobalWorkerOptions } from 'pdfjs-dist';

// Configure PDF.js worker with a more reliable CDN
GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.js`;

interface ReportData {
  presupuestoGeneral: string;
  esPorLotes: boolean;
  lotes: any[];
  variablesDinamicas: any[];
  formulaEconomica: string;
  formulasDetectadas: any[];
  umbralBajaTemeraria: string;
  criteriosAutomaticos: any[];
  criteriosSubjetivos: any[];
  otrosCriterios: any[];
  costesDetalladosRecomendados: any[];
}

const responseSchema = {
  type: "object",
  properties: {
    presupuestoGeneral: { type: "string" },
    esPorLotes: { type: "boolean" },
    lotes: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          centroAsociado: { type: "string" },
          descripcion: { type: "string" },
          presupuesto: { type: "string" },
          requisitosClave: {
            type: "array",
            items: { type: "string" }
          }
        },
        required: ["nombre", "centroAsociado", "descripcion", "presupuesto"]
      }
    },
    variablesDinamicas: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          mapeo: { 
            type: "string",
            enum: ["price", "tenderBudget", "maxScore", "lowestPrice", "averagePrice"] 
          }
        },
        required: ["nombre", "descripcion", "mapeo"]
      }
    },
    formulaEconomica: { type: "string" },
    formulasDetectadas: {
      type: "array",
      items: {
        type: "object",
        properties: {
          formulaOriginal: { type: "string" },
          representacionLatex: { type: "string" },
          descripcionVariables: { type: "string" },
          condicionesLogicas: { type: "string" }
        },
        required: ["formulaOriginal", "representacionLatex", "descripcionVariables"]
      }
    },
    umbralBajaTemeraria: { type: "string" },
    criteriosAutomaticos: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    criteriosSubjetivos: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    otrosCriterios: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    costesDetalladosRecomendados: {
      type: "array",
      items: {
        type: "object",
        properties: {
          categoria: { type: "string" },
          concepto: { type: "string" },
          costeEstimado: { type: "number" },
          justificacion: { type: "string" }
        },
        required: ["categoria", "concepto", "costeEstimado", "justificacion"]
      }
    }
  },
  required: [
    "presupuestoGeneral",
    "esPorLotes", 
    "lotes",
    "variablesDinamicas",
    "formulaEconomica",
    "formulasDetectadas",
    "umbralBajaTemeraria",
    "criteriosAutomaticos",
    "criteriosSubjetivos",
    "otrosCriterios",
    "costesDetalladosRecomendados"
  ]
};

export const useCostAnalysis = () => {
  const [analysisResult, setAnalysisResult] = useState<ReportData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const extractTextFromPDF = async (file: File): Promise<string> => {
    try {
      console.log('üìÑ Iniciando extracci√≥n de texto del PDF:', file.name);
      const arrayBuffer = await file.arrayBuffer();
      console.log('‚úÖ ArrayBuffer obtenido, tama√±o:', arrayBuffer.byteLength);
      
      const pdf = await getDocument({ 
        data: arrayBuffer,
        useWorkerFetch: false,
        isEvalSupported: false,
        useSystemFonts: true
      }).promise;
      
      console.log('‚úÖ PDF cargado, p√°ginas:', pdf.numPages);
      let fullText = '';

      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        console.log(`üìñ Procesando p√°gina ${pageNum}/${pdf.numPages}`);
        const page = await pdf.getPage(pageNum);
        const textContent = await page.getTextContent();
        const pageText = textContent.items
          .map((item: any) => item.str)
          .join(' ');
        fullText += pageText + '\n';
      }

      console.log('‚úÖ Extracci√≥n completada, caracteres totales:', fullText.length);
      return fullText;
    } catch (error) {
      console.error('‚ùå Error extracting text from PDF:', error);
      throw new Error(`Error al extraer texto del PDF: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    }
  };

  const createAnalysisPrompt = (pcapText: string, pptText: string): string => {
    return `Act√∫a como un prestigioso matem√°tico y un experto consultor especializado en licitaciones p√∫blicas de electromedicina en Espa√±a. Tu tarea es analizar el texto extra√≠do de un Pliego de Cl√°usulas Administrativas Particulares (PCAP) y un Pliego de Prescripciones T√©cnicas (PPT).

**Instrucci√≥n de Idioma (CR√çTICA):** Los documentos de entrada (PCAP y PPT) pueden estar escritos en espa√±ol, catal√°n, gallego, euskera (vasco), valenciano o ingl√©s. Independientemente del idioma de origen, TU RESPUESTA Y TODOS LOS DATOS EXTRA√çDOS en el JSON final DEBEN ESTAR OBLIGATORIAMENTE EN ESPA√ëOL. Realiza la traducci√≥n necesaria para todos los campos.

Extrae √∫nicamente la informaci√≥n verificable presente en los textos proporcionados para rellenar la estructura JSON solicitada. No incluyas explicaciones, introducciones o conclusiones fuera del objeto JSON.

**An√°lisis de Lotes:**
1.  **Detecta si es por lotes:** Primero, determina si la licitaci√≥n est√° expl√≠citamente dividida en lotes. Establece el campo 'esPorLotes' en 'true' si es as√≠, y en 'false' en caso contrario.
2.  **Si es por lotes:** Rellena el array 'lotes'. Para cada lote identificado, extrae: 'nombre', 'centroAsociado', 'descripcion', 'presupuesto' (string num√©rico sin IVA), y 'requisitosClave'.
3.  **Si NO es por lotes:** El array 'lotes' debe quedar vac√≠o ([]).

---
**TAREA CR√çTICA 1: AN√ÅLISIS DE VARIABLES DIN√ÅMICAS (NUEVO)**
Antes de analizar la f√≥rmula econ√≥mica principal, tu primera tarea es identificar las variables que se usan en ella.
1.  **Detecta Variables:** Identifica todas las variables utilizadas en la f√≥rmula de puntuaci√≥n econ√≥mica (ej. "Plic", "Pmax", "Oferta_i", "B").
2.  **Define y Mapea:** Por cada variable detectada, crea un objeto en el array \`variablesDinamicas\`. Este objeto DEBE tener:
    *   \`nombre\`: El nombre exacto de la variable tal y como aparece en el pliego (ej: "Plic").
    *   \`descripcion\`: Una descripci√≥n clara de lo que representa la variable (ej: "Presupuesto base de licitaci√≥n sin IVA").
    *   \`mapeo\`: Un mapeo ESTRICTO a uno de los siguientes conceptos del sistema: "price", "tenderBudget", "maxScore", "lowestPrice", "averagePrice".
    
    **Ejemplo de Salida para \`variablesDinamicas\`:**
    \`\`\`json
    "variablesDinamicas": [
      {
        "nombre": "P",
        "descripcion": "Precio de la oferta evaluada",
        "mapeo": "price"
      },
      {
        "nombre": "Plic",
        "descripcion": "Presupuesto de la licitaci√≥n",
        "mapeo": "tenderBudget"
      }
    ]
    \`\`\`

**TAREA CR√çTICA 2: AN√ÅLISIS Y DESCOMPOSICI√ìN DE F√ìRMULAS (AST como String JSON)**
Una vez identificadas las variables, analiza la f√≥rmula econ√≥mica principal y descomponla en un √Årbol de Sintaxis Abstracta (AST) serializado como una cadena JSON.
*   **Usa las Variables Detectadas:** En los nodos de tipo "variable" del AST, DEBES usar el \`nombre\` de la variable que has definido en \`variablesDinamicas\`. Por ejemplo, si detectaste "Plic", el nodo variable ser√° \`{ "type": "variable", "name": "Plic" }\`.
*   **Serializaci√≥n:** El objeto JSON completo del AST debe ser serializado como una √∫nica cadena de texto para el campo \`formulaEconomica\`.

**EJEMPLO COMPLETO:**
Si la f√≥rmula es \`70 * (1 - (P - Pmin) / (Plic - Pmin))\`, y has detectado que 'P' es el precio de la oferta, 'Pmin' el precio m√°s bajo y 'Plic' el presupuesto:
1.  \`variablesDinamicas\` contendr√° las definiciones de 'P', 'Pmin', y 'Plic'.
2.  El AST usar√° estos nombres: \`{"type":"binary_operation","operator":"*","left":{...},"right":{"type":"binary_operation", "operator": "-", "left":{...}, "right":{"type":"binary_operation", "operator":"/", "left": {"type":"variable", "name":"P"},...}}}\`
3.  El campo \`formulaEconomica\` recibir√° este AST como una cadena de texto JSON.

Si no hay f√≥rmula econ√≥mica principal, \`formulaEconomica\` ser√° un string de objeto vac√≠o ('{}') y \`variablesDinamicas\` un array vac√≠o ([]).

---
**TAREA CR√çTICA 3: AN√ÅLISIS MATEM√ÅTICO DE TODAS LAS F√ìRMULAS**
Como matem√°tico, tu misi√≥n es identificar, interpretar y catalogar **todas** las f√≥rmulas presentes en los documentos, no solo la f√≥rmula de puntuaci√≥n econ√≥mica principal. Esto incluye f√≥rmulas para criterios de mejora, f√≥rmulas de penalizaci√≥n, umbrales calculados, etc.

Para cada f√≥rmula matem√°tica que encuentres, sin excepci√≥n:
1.  **Ajusta e Interpreta:** Analiza la f√≥rmula para entender su prop√≥sito y componentes. Si la f√≥rmula est√° escrita de manera ambigua o con texto descriptivo, "aj√∫stala" para representarla en una notaci√≥n matem√°tica est√°ndar y clara.
2.  **Cataloga en \`formulasDetectadas\`:** Crea un objeto en el array \`formulasDetectadas\` con los siguientes campos:
    *   \`formulaOriginal\`: La f√≥rmula EXACTA como est√° en el texto. Si la has ajustado desde una descripci√≥n, pon aqu√≠ la versi√≥n ajustada y est√°ndar.
    *   \`representacionLatex\`: Su traducci√≥n precisa a formato LaTeX. Presta especial atenci√≥n a ra√≠ces, potencias, fracciones y s√≠mbolos. **Ej: \`P = 5 * (Ht ‚Äì 100)/ 100)\` debe ser \`P = 5 \\times \\frac{(Ht - 100)}{100}\`**.
    *   \`descripcionVariables\`: Una descripci√≥n clara y concisa de CADA variable en la f√≥rmula.
    *   \`condicionesLogicas\`: Explica cualquier condici√≥n l√≥gica, tramo o regla asociada. Por ejemplo: "Esta f√≥rmula solo se aplica si la oferta supera las 100 horas de formaci√≥n."

Tu objetivo es que un usuario pueda entender perfectamente c√≥mo funciona cada c√°lculo en la licitaci√≥n. No omitas ninguna f√≥rmula, por trivial que parezca.
---

**An√°lisis del Resto de Criterios:**
*   **'umbralBajaTemeraria':** Describe las condiciones para que una oferta sea considerada anormalmente baja o temeraria.
*   **'criteriosAutomaticos', 'criteriosSubjetivos', 'otrosCriterios':** Listas detalladas de todos los dem√°s criterios con su descripci√≥n y puntuaci√≥n m√°xima. La suma de todas las puntuaciones debe ser coherente con el total del pliego.

**An√°lisis Econ√≥mico y de Costes:**
*   **Presupuesto General:** Busca el "Presupuesto Base de Licitaci√≥n" (PBL) o "Valor Estimado del Contrato" (VEC) **TOTAL**. Extrae su valor num√©rico **sin IVA** como una cadena de texto.
*   **Recomendaciones de Costes ('costesDetalladosRecomendados'):** Act√∫a como un director de operaciones. Tu objetivo es generar un desglose de costes **realista, completo y rentable**.

Regla general: Si un dato no se encuentra, usa "No especificado en los documentos" para strings y arrays vac√≠os para listas. Para los costes recomendados, omite los campos que no puedas estimar.

--- TEXTO PCAP ---
${pcapText}
--- FIN TEXTO PCAP ---

--- TEXTO PPT ---
${pptText}
--- FIN TEXTO PPT ---`;
  };

  const callGeminiAPI = async (prompt: string): Promise<ReportData> => {
    const GEMINI_API_KEY = 'AIzaSyANIWvIMRvCW7f0meHRk4SobRz4s0pnxtg';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent';

    console.log('ü§ñ Llamando a Gemini API...');

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.1,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
          responseMimeType: "application/json",
          responseSchema: responseSchema
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error de Gemini API:', response.status, errorText);
      throw new Error(`Error de Gemini API: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Respuesta de Gemini recibida:', data);
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Respuesta inv√°lida de Gemini API');
    }

    const responseText = data.candidates[0].content.parts[0].text;
    console.log('üìù Texto de respuesta:', responseText);
    
    let parsedResult: ReportData;
    try {
      parsedResult = JSON.parse(responseText);
      console.log('‚úÖ JSON parseado correctamente:', parsedResult);
    } catch (parseError) {
      console.error('‚ùå Error al parsear JSON:', parseError);
      throw new Error('Error al parsear la respuesta de la IA');
    }

    // Post-procesamiento: parsear formulaEconomica si existe y no est√° vac√≠a
    if (parsedResult.formulaEconomica && parsedResult.formulaEconomica !== '{}') {
      try {
        const formulaObject = JSON.parse(parsedResult.formulaEconomica);
        console.log('‚úÖ F√≥rmula econ√≥mica parseada:', formulaObject);
        parsedResult.formulaEconomica = JSON.stringify(formulaObject);
      } catch (formulaError) {
        console.warn('‚ö†Ô∏è Error al parsear formulaEconomica, manteniendo como string:', formulaError);
      }
    }

    return parsedResult;
  };

  const analyzeCosts = async (pcapFile: File, pptFile: File): Promise<void> => {
    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);

    try {
      console.log('üîç Iniciando an√°lisis de costes...');
      console.log('üìÑ Archivos recibidos:', {
        pcap: pcapFile.name,
        ppt: pptFile.name
      });

      // Extraer texto de ambos PDFs
      console.log('üìù Extrayendo texto del PCAP...');
      const pcapText = await extractTextFromPDF(pcapFile);
      console.log('‚úÖ PCAP procesado, caracteres:', pcapText.length);

      console.log('üìù Extrayendo texto del PPT...');
      const pptText = await extractTextFromPDF(pptFile);
      console.log('‚úÖ PPT procesado, caracteres:', pptText.length);

      // Solo procesar si se obtuvieron textos v√°lidos
      if (!pcapText.trim() && !pptText.trim()) {
        throw new Error('No se pudo extraer texto de los archivos PDF');
      }

      // Crear prompt
      console.log('üîß Creando prompt para an√°lisis...');
      const prompt = createAnalysisPrompt(pcapText, pptText);
      console.log('‚úÖ Prompt creado, longitud:', prompt.length);

      // Llamar a Gemini API
      console.log('ü§ñ Enviando a Gemini API...');
      const result = await callGeminiAPI(prompt);
      console.log('‚úÖ An√°lisis completado:', result);

      setAnalysisResult(result);
    } catch (err) {
      console.error('‚ùå Error en an√°lisis de costes:', err);
      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';
      setError(`Error en el an√°lisis: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    analyzeCosts,
    analysisResult,
    isLoading,
    error
  };
};
