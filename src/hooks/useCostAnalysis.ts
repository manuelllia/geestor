import { useState } from 'react';

interface ReportData {
  presupuestoGeneral: string;
  esPorLotes: boolean;
  lotes: any[];
  variablesDinamicas: any[];
  formulaEconomica: string;
  formulasDetectadas: any[];
  umbralBajaTemeraria: string;
  criteriosAutomaticos: any[];
  criteriosSubjetivos: any[];
  otrosCriterios: any[];
  costesDetalladosRecomendados: any[];
}

const responseSchema = {
  type: "object",
  properties: {
    presupuestoGeneral: { type: "string" },
    esPorLotes: { type: "boolean" },
    lotes: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          centroAsociado: { type: "string" },
          descripcion: { type: "string" },
          presupuesto: { type: "string" },
          requisitosClave: {
            type: "array",
            items: { type: "string" }
          }
        },
        required: ["nombre", "centroAsociado", "descripcion", "presupuesto"]
      }
    },
    variablesDinamicas: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          mapeo: {
            type: "string",
            enum: ["price", "tenderBudget", "maxScore", "lowestPrice", "averagePrice"]
          }
        },
        required: ["nombre", "descripcion", "mapeo"]
      }
    },
    formulaEconomica: { type: "string" },
    formulasDetectadas: {
      type: "array",
      items: {
        type: "object",
        properties: {
          formulaOriginal: { type: "string" },
          representacionLatex: { type: "string" },
          descripcionVariables: { type: "string" }
        },
        required: ["formulaOriginal", "representacionLatex", "descripcionVariables"]
      }
    },
    umbralBajaTemeraria: { type: "string" },
    criteriosAutomaticos: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    criteriosSubjetivos: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    otrosCriterios: {
      type: "array",
      items: {
        type: "object",
        properties: {
          nombre: { type: "string" },
          descripcion: { type: "string" },
          puntuacionMaxima: { type: "number" }
        },
        required: ["nombre", "descripcion", "puntuacionMaxima"]
      }
    },
    costesDetalladosRecomendados: {
      type: "array",
      items: {
        type: "object",
        properties: {
          categoria: { type: "string" },
          concepto: { type: "string" },
          costeEstimado: { type: "number" },
          justificacion: { type: "string" }
        },
        required: ["categoria", "concepto", "costeEstimado", "justificacion"]
      }
    }
  },
  required: [
    "presupuestoGeneral",
    "esPorLotes", 
    "lotes",
    "variablesDinamicas",
    "formulaEconomica",
    "formulasDetectadas",
    "umbralBajaTemeraria",
    "criteriosAutomaticos",
    "criteriosSubjetivos",
    "otrosCriterios",
    "costesDetalladosRecomendados"
  ]
};

export const useCostAnalysis = () => {
  const [analysisResult, setAnalysisResult] = useState<ReportData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const convertFileToBase64 = async (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = (reader.result as string).split(',')[1];
        resolve(base64String);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const createOptimizedPrompt = (): string => {
    return `Eres un experto consultor en licitaciones p√∫blicas de electromedicina en Espa√±a. Analiza los documentos PDF: PCAP y PPT.

CR√çTICO: Responde √öNICAMENTE con JSON v√°lido y bien formateado. No a√±adas texto antes ni despu√©s del JSON. Los documentos pueden estar en cualquier idioma de Espa√±a, pero tu respuesta debe estar en espa√±ol.

Extrae solo informaci√≥n verificable de los textos para completar esta estructura JSON exacta:

{
  "presupuestoGeneral": "string con el presupuesto base sin IVA o 'No especificado'",
  "esPorLotes": true/false,
  "lotes": [
    {
      "nombre": "string",
      "centroAsociado": "string", 
      "descripcion": "string",
      "presupuesto": "string",
      "requisitosClave": ["string1", "string2"]
    }
  ],
  "variablesDinamicas": [
    {
      "nombre": "string",
      "descripcion": "string",
      "mapeo": "price|tenderBudget|maxScore|lowestPrice|averagePrice"
    }
  ],
  "formulaEconomica": "f√≥rmula principal encontrada o 'No especificada'",
  "formulasDetectadas": [
    {
      "formulaOriginal": "string",
      "representacionLatex": "string",
      "descripcionVariables": "string"
    }
  ],
  "umbralBajaTemeraria": "porcentaje o criterio encontrado o 'No especificado'",
  "criteriosAutomaticos": [
    {
      "nombre": "string",
      "descripcion": "string", 
      "puntuacionMaxima": 0
    }
  ],
  "criteriosSubjetivos": [
    {
      "nombre": "string",
      "descripcion": "string",
      "puntuacionMaxima": 0
    }
  ],
  "otrosCriterios": [
    {
      "nombre": "string",
      "descripcion": "string",
      "puntuacionMaxima": 0
    }
  ],
  "costesDetalladosRecomendados": [
    {
      "categoria": "string",
      "concepto": "string",
      "costeEstimado": 0,
      "justificacion": "string"
    }
  ]
}

IMPORTANTE: Si no encuentras informaci√≥n espec√≠fica, usa "No especificado" para strings, false para booleanos, 0 para n√∫meros y arrays vac√≠os [] para listas. M√°ximo 2 f√≥rmulas en formulasDetectadas.`;
  };

  const cleanJsonResponse = (text: string): string => {
    // Remover texto antes y despu√©s del JSON
    let cleaned = text.trim();
    
    // Buscar el primer { y el √∫ltimo }
    const firstBrace = cleaned.indexOf('{');
    const lastBrace = cleaned.lastIndexOf('}');
    
    if (firstBrace !== -1 && lastBrace !== -1 && firstBrace < lastBrace) {
      cleaned = cleaned.substring(firstBrace, lastBrace + 1);
    }
    
    // Limpiar caracteres problem√°ticos
    cleaned = cleaned
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // Caracteres de control
      .replace(/\\/g, '\\\\') // Escapar backslashes
      .replace(/"/g, '\\"') // Escapar comillas
      .replace(/\n/g, '\\n') // Escapar saltos de l√≠nea
      .replace(/\r/g, '\\r') // Escapar retornos de carro
      .replace(/\t/g, '\\t') // Escapar tabulaciones
      .trim();

    // Reemplazar las comillas escapadas de vuelta
    cleaned = cleaned.replace(/\\"/g, '"');
    
    return cleaned;
  };

  const callGeminiAPI = async (pcapFile: File, pptFile: File): Promise<ReportData> => {
    const GEMINI_API_KEY = 'AIzaSyANIWvIMRvCW7f0meHRk4SobRz4s0pnxtg';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent';
    
    console.log('ü§ñ Iniciando an√°lisis con Gemini API optimizado...');

    try {
      console.log('üìÑ Convirtiendo archivos a base64...');
      const pcapBase64 = await convertFileToBase64(pcapFile);
      const pptBase64 = await convertFileToBase64(pptFile);
      console.log('‚úÖ Archivos convertidos');

      const requestBody = {
        contents: [{
          parts: [
            {
              text: createOptimizedPrompt()
            },
            {
              inline_data: {
                mime_type: "application/pdf",
                data: pcapBase64
              }
            },
            {
              inline_data: {
                mime_type: "application/pdf", 
                data: pptBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.1,
          topK: 10,
          topP: 0.8,
          maxOutputTokens: 8192,
          responseMimeType: "application/json",
          responseSchema: responseSchema
        }
      };

      console.log('üöÄ Enviando solicitud a Gemini...');
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Error HTTP:', response.status, errorText);
        throw new Error(`Error HTTP ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log('üì• Respuesta recibida:', data);
      
      if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
        throw new Error('Respuesta inv√°lida de Gemini API');
      }

      let responseText = data.candidates[0].content.parts[0].text;
      console.log('üìù Procesando respuesta JSON...');
      
      try {
        // Intentar parsear directamente primero
        let parsedResult: ReportData = JSON.parse(responseText);
        console.log('‚úÖ JSON parseado correctamente');
        return validateAndCleanData(parsedResult);
      } catch (parseError) {
        console.log('‚ùå Error parseando JSON:', parseError);
        console.log('üßπ Intentando limpiar el JSON...');
        
        // Intentar limpiar y parsear de nuevo
        responseText = cleanJsonResponse(responseText);
        console.log('üîÑ Texto limpiado, reintentando parseo...');
        
        try {
          let parsedResult: ReportData = JSON.parse(responseText);
          console.log('‚úÖ JSON parseado tras limpieza');
          return validateAndCleanData(parsedResult);
        } catch (secondParseError) {
          console.error('‚ùå Error persistente en JSON:', secondParseError);
          console.log('üîÑ Intentando con Claude...');
          throw new Error('Error parseando respuesta JSON de Gemini');
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error en Gemini:', error);
      console.log('üîÑ Intentando con Claude...');
      throw error;
    }
  };

  const callClaudeAPI = async (pcapFile: File, pptFile: File): Promise<ReportData> => {
    console.log('üß† Usando Claude como fallback...');
    
    // Claude API no se puede llamar directamente desde el cliente por CORS
    // Necesitar√≠as un backend proxy o usar una implementaci√≥n diferente
    throw new Error('Claude API requiere un backend proxy para evitar CORS');
  };

  const callOpenAIAPI = async (pcapFile: File, pptFile: File): Promise<ReportData> => {
    const OPENAI_API_KEY = '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';
    const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
    
    console.log('üî• Usando OpenAI como √∫ltimo recurso...');

    try {
      const pcapBase64 = await convertFileToBase64(pcapFile);
      const pptBase64 = await convertFileToBase64(pptFile);

      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages: [{
            role: 'user',
            content: [
              {
                type: 'text',
                text: createOptimizedPrompt()
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:application/pdf;base64,${pcapBase64}`
                }
              },
              {
                type: 'image_url', 
                image_url: {
                  url: `data:application/pdf;base64,${pptBase64}`
                }
              }
            ]
          }],
          max_tokens: 4000,
          temperature: 0.1,
          response_format: { type: "json_object" }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Error OpenAI:', response.status, errorText);
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      let responseText = data.choices[0].message.content;
      
      try {
        const parsedResult = JSON.parse(responseText);
        return validateAndCleanData(parsedResult);
      } catch (parseError) {
        console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
        // Intentar limpiar el JSON
        responseText = cleanJsonResponse(responseText);
        const parsedResult = JSON.parse(responseText);
        return validateAndCleanData(parsedResult);
      }
      
    } catch (error) {
      console.error('‚ùå Error en OpenAI:', error);
      throw new Error('Error en el an√°lisis con OpenAI');
    }
  };

  const validateAndCleanData = (data: any): ReportData => {
    // Validar y limpiar los datos recibidos
    const cleanedData: ReportData = {
      presupuestoGeneral: data.presupuestoGeneral || "No especificado",
      esPorLotes: Boolean(data.esPorLotes),
      lotes: Array.isArray(data.lotes) ? data.lotes : [],
      variablesDinamicas: Array.isArray(data.variablesDinamicas) ? data.variablesDinamicas : [],
      formulaEconomica: data.formulaEconomica || "No especificada",
      formulasDetectadas: Array.isArray(data.formulasDetectadas) ? data.formulasDetectadas.slice(0, 2) : [],
      umbralBajaTemeraria: data.umbralBajaTemeraria || "No especificado",
      criteriosAutomaticos: Array.isArray(data.criteriosAutomaticos) ? data.criteriosAutomaticos : [],
      criteriosSubjetivos: Array.isArray(data.criteriosSubjetivos) ? data.criteriosSubjetivos : [],
      otrosCriterios: Array.isArray(data.otrosCriterios) ? data.otrosCriterios : [],
      costesDetalladosRecomendados: Array.isArray(data.costesDetalladosRecomendados) ? data.costesDetalladosRecomendados : []
    };
    
    return cleanedData;
  };

  const analyzeCosts = async (pcapFile: File, pptFile: File): Promise<void> => {
    setIsLoading(true);
    setError(null);
    setAnalysisResult(null);
    
    try {
      console.log('üîç Iniciando an√°lisis de costes optimizado...');
      console.log('üìÑ Archivos:', {
        pcap: `${pcapFile.name} (${(pcapFile.size / 1024 / 1024).toFixed(2)} MB)`,
        ppt: `${pptFile.name} (${(pptFile.size / 1024 / 1024).toFixed(2)} MB)`
      });

      let result: ReportData;
      
      try {
        // Intentar primero con Gemini
        result = await callGeminiAPI(pcapFile, pptFile);
      } catch (geminiError) {
        console.log('üîÑ Fallback a Claude API...');
        try {
          result = await callClaudeAPI(pcapFile, pptFile);
        } catch (claudeError) {
          console.log('üî• Usando OpenAI como √∫ltimo recurso...');
          result = await callOpenAIAPI(pcapFile, pptFile);
        }
      }
      
      console.log('‚úÖ An√°lisis completado exitosamente');
      setAnalysisResult(result);
      
    } catch (err) {
      console.error('‚ùå Error final en an√°lisis:', err);
      const errorMessage = err instanceof Error ? err.message : 'Error desconocido en el an√°lisis';
      setError('Todos los servicios de IA han fallado. Por favor, int√©ntalo m√°s tarde.');
    } finally {
      setIsLoading(false);
    }
  };

  return {
    analyzeCosts,
    analysisResult,
    isLoading,
    error
  };
};